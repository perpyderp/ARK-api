(()=>{var e={549:(e,r,t)=>{const n=t(103);r.getCreatures=async(e,r)=>{try{const e=await n.find();r.json(e)}catch(e){r.status(500).json({error:e.message})}},r.getCreatureByName=async(e,r)=>{try{const t=await n.findOne({name:e.params.name});if(!t)return r.status(404).json({message:e.params.name+" not found"});r.json(t)}catch(e){r.status(500).json({error:e.message})}}},203:(e,r,t)=>{const n=t(185);t(142).config({path:"../../.env"});const o=process.env.MONGODB_URI;n.connect(o,{useNewUrlParser:!0,useUnifiedTopology:!0}).then((()=>console.log("MongoDB connected..."))).catch((e=>console.log(e)));const s=n.connection;e.exports=s},103:(e,r,t)=>{const n=t(185),o=new n.Schema({name:{type:String,required:!0},diet:{type:String,required:!1},temperament:{type:String,required:!1},tameable:{type:String,required:!1},rideable:{type:String,required:!1},breedable:{type:String,required:!1},saddleLevelObtained:{type:String,required:!1},creatureID:{type:String,required:!1},url:{type:String,required:!1}});e.exports=n.model("Creature",o)},357:(e,r,t)=>{const n=t(860).Router(),o=t(549);n.get("/creatures",o.getCreatures),n.get("/creatures/:name",o.getCreatureByName),e.exports=n},142:e=>{"use strict";e.exports=require("dotenv")},860:e=>{"use strict";e.exports=require("express")},185:e=>{"use strict";e.exports=require("mongoose")}},r={};function t(n){var o=r[n];if(void 0!==o)return o.exports;var s=r[n]={exports:{}};return e[n](s,s.exports,t),s.exports}(()=>{const e=t(860),r=t(357),n=t(203);t(142).config({path:"../../.env"});const o=e(),s=process.env.SERVER_PORT;o.use("/api",r),o.use(e.json()),o.get("/",((e,r)=>{r.send("Welcome to the ARK API")})),console.log("Connecting to database..."),n.on("error",console.error.bind(console,"MongoDB connection error:")),n.once("open",(()=>{console.log("MongoDB connection established"),o.listen(s,(()=>{console.log(`ARK API listening on port ${s}`)}))}))})()})();